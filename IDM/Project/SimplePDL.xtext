// automatically generated by Xtext
grammar fr.n7.simplepdl.txt.PDL with org.eclipse.xtext.common.Terminals

import "http://simplepdl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Process returns Process:
	{Process}
	'Process'
	name=EString
	'{'
		('processElement' '{' processElements+=ProcessElement ( "," processElements+=ProcessElement)* '}' )?
	'}';

ProcessElement returns ProcessElement:
	ProcessElement_Impl | WorkDefinition | WorkSequence | Guidance | Ressources;





EString returns ecore::EString:
	STRING | ID;

ProcessElement_Impl returns ProcessElement:
	{ProcessElement}
	'ProcessElement'
	;

WorkDefinition returns WorkDefinition:
	{WorkDefinition}
	'WorkDefinition'
	name=EString
	'{'
		('linksToPredecessors' '(' linksToPredecessors+=[WorkSequence|EString] ( "," linksToPredecessors+=[WorkSequence|EString])* ')' )?
		('linksToSuccessors' '(' linksToSuccessors+=[WorkSequence|EString] ( "," linksToSuccessors+=[WorkSequence|EString])* ')' )?
		('linksToProdecessors' '(' linksToProdecessors+=[WorkSequence|EString] ( "," linksToProdecessors+=[WorkSequence|EString])* ')' )?
		('poids' '{' poids+=poids ( "," poids+=poids)* '}' )?
	'}';

WorkSequence returns WorkSequence:
	'WorkSequence'
	'{'
		'linkType' linkType=WorkSequenceType
		'predecessor' predecessor=[WorkDefinition|EString]
		'successor' successor=[WorkDefinition|EString]
		'succesor' succesor=[WorkDefinition|EString]
	'}';

Guidance returns Guidance:
	{Guidance}
	'Guidance'
	'{'
		('text' text=EString)?
		('elements' '(' elements+=[ProcessElement|EString] ( "," elements+=[ProcessElement|EString])* ')' )?
	'}';


Ressources returns Ressources:
	{Ressources}
	'Ressources'
	name=EString
	'{'
		('occurences' occurences=EInt)?
		('poids' '(' poids+=[poids|EString] ( "," poids+=[poids|EString])* ')' )?
	'}';

poids returns poids:
	'poids'
	'{'
		('valeur' valeur=EInt)?
		'ressources' ressources=[Ressources|EString]
		'workdefinition' workdefinition=[WorkDefinition|EString]
	'}';

EInt returns ecore::EInt:
	'-'? INT;

enum WorkSequenceType returns WorkSequenceType:
				startToStart = 'startToStart' | finishToStart = 'finishToStart' | startToFinish = 'startToFinish' | finishToFinish = 'finishToFinish';
